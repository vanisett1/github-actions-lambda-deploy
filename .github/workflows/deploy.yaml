name: Deploy Lambdas

on:
  push:
    branches:
      - dev
      - qa
    paths:
      - 'lambdas/**'

  workflow_dispatch:
    inputs:
      lambda_name:
        description: 'Name of the lambda or path if it is nested, to deploy (use "all" to deploy all lambdas)'
        required: false
        type: string

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_lambdas: ${{ steps.changes.outputs.changed_lambdas }}
      environment: ${{ steps.set-environment.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set environment based on branch
        id: set-environment
        run: |
          branch_name="${{ github.ref_name }}"
          environment=$(echo $branch_name | awk -F'/' '{print $NF}')
          echo "Environment: $environment"
          echo "environment=$environment" >> $GITHUB_OUTPUT
          
      - name: Get changed lambdas
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.lambda_name }}" = "all" ]; then
              changed_lambdas=$(find lambdas -mindepth 1 -maxdepth 2 -type d -exec bash -c '[ -f "$0/package.json" ]' {} \; -print | cut -d'/' -f2- | awk 'NF' | jq -R -s -c 'split("\n")[:-1]')
            elif [ -n "${{ github.event.inputs.lambda_name }}" ]; then
              changed_lambdas='["${{ github.event.inputs.lambda_name }}"]'
            else
              changed_lambdas='[]'
            fi
          else
            changed_lambdas=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^lambdas/' | while read file; do dir=$(dirname "$file"); if [ -f "$dir/package.json" ]; then echo "${dir#lambdas/}"; fi; done | sort -u | jq -R -s -c 'split("\n")[:-1]')
          fi
          
          echo "Changed lambdas: $changed_lambdas"
          echo "changed_lambdas=$changed_lambdas" >> $GITHUB_OUTPUT

  deploy-lambdas:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: ${{ needs.detect-changes.outputs.changed_lambdas != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        lambda: ${{ fromJson(needs.detect-changes.outputs.changed_lambdas) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16.19.1'

      - name: npm Install
        run: |
          cd lambdas/${{ matrix.lambda }}
          npm install

      - name: Bump version
        run: |
          cd lambdas/${{ matrix.lambda }}
          npm version $(jq -r '.version' package.json)-${{ needs.detect-changes.outputs.environment }}-${{ github.run_number }}

      - name: npm build
        run: |
          cd lambdas/${{ matrix.lambda }}
          npm run build

      - name: Prepare configuration
        run: |
          cd lambdas/${{ matrix.lambda }}
          cp viax.${{ needs.detect-changes.outputs.environment }}.yaml viax.yaml

      - name: npm test
        run: |
          cd lambdas/${{ matrix.lambda }}
          npm run test

      - name: Package lambda
        run: |
          cd lambdas/${{ matrix.lambda }}
          rm -f fcn.zip
          npm install --production
          zip -r fcn.zip package.json viax.yaml src node_modules

      - name: Deploy Lambda
        env:
          ENVIRONMENT: ${{ needs.detect-changes.outputs.environment }}
          VIAX_USERNAME: ${{ secrets[format('VIAX_USERNAME_{0}', needs.detect-changes.outputs.environment)] }}
          VIAX_PASSWORD: ${{ secrets[format('VIAX_PASSWORD_{0}', needs.detect-changes.outputs.environment)] }}
        
        run: |
          cd lambdas/${{ matrix.lambda }}
          # Source the .env file based on the environment
          source ./.env.${{ needs.detect-changes.outputs.environment }}
          # Run the push script
          # ./push.sh

  no-changes:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: ${{ needs.detect-changes.outputs.changed_lambdas == '[]' }}
    steps:
      - name: No changes detected
        run: echo "No changes detected or no lambda specified. No deployment needed."

